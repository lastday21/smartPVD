"""
preprocess_refactored.py ‚Äî –º–æ–¥—É–ª—å –ø—Ä–µ–¥‚Äë–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ü–ü–î –∏ –¥–æ–±—ã—á–∏ –Ω–µ—Ñ—Ç–∏
–¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ *smartPVD*.

üõ† **–ö–ª—é—á–µ–≤–∞—è –∏–¥–µ—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞**
---------------------------------
–ú–æ–¥—É–ª—å —Ä–∞–∑–≤–µ–¥–µ–Ω –Ω–∞ –¥–≤–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ —á–∞—Å—Ç–∏:

1. `_build_clean_data_df`‚Äî *—á–∏—Å—Ç–æ–µ —è–¥—Ä–æ* (pure‚Äëfunction), –∫–æ—Ç–æ—Ä–æ–µ **–Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç
   –Ω–∏–∫–∞–∫–æ–≥–æ –≤–≤–æ–¥–∞‚Äë–≤—ã–≤–æ–¥–∞**, –∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏
   `pandas.DataFrame`. –û–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏, —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥–∞ –∏
   –∞–≥—Ä–µ–≥–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ DataFrame‚Äë—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞.
2. `build_clean_data`‚Äî *—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å* (–æ–±—ë—Ä—Ç–∫–∞), –∫–æ—Ç–æ—Ä—ã–π –≤ —Ä–µ–∂–∏–º–µ
   **in‚Äëmemory** –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ DataFrame‚Äë—ã, –∞ –≤ —Ä–µ–∂–∏–º–µ **CLI**/–æ—Ç–ª–∞–¥–∫–∏ —Å–∞–º
   –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ Excel/CSV‚Äë—Ñ–∞–π–ª—ã, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ CSV –∏
   –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ø—Ä–µ–∂–Ω–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å 100%).

–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º:
‚Ä¢ –í–∫–æ–Ω–≤–µ–π–µ—Ä–µ SmartPVD –≤—ã –≤—ã–∑—ã–≤–∞–µ—Ç–µ `build_clean_data(ppd_df=..., oil_df=...,
  coords_df=..., save_csv=False)` ‚ûú –Ω–∏–∫–∞–∫–æ–≥–æ I/O–º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏.
‚Ä¢ –î–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω `python preprocess_refactored.py` ‚Äî –±—É–¥—É—Ç
  –ø—Ä–æ—á–∏—Ç–∞–Ω—ã –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≥–æ—Ç–æ–≤—ã–µ CSV –≤`clean_data/`.
"""
from __future__ import annotations

from pathlib import Path
import re
import pandas as pd
import numpy as np

# --------------------------- –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è -----------------------------
from config import (
    PPD_FILE, OIL_FILE, COORD_FILE,
    PPD_SHEET_NAME, OIL_SHEET_NAME,
    GAP_LIMIT, FREQ_THRESH, MIN_WORK_PPD, NO_PRESS_WITH_Q_LIMIT,
)

# –ü–∞–ø–∫–∞ –¥–ª—è CSV‚Äë—Ñ–∞–π–ª–æ–≤ –æ—Ç–ª–∞–¥–∫–∏
CLEAN_DIR = Path("clean_data")
CLEAN_DIR.mkdir(exist_ok=True)

# ---------------------------------------------------------------------
# ‚¨áÔ∏è  –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ª–æ–≥–∏–∫–∏)
# ---------------------------------------------------------------------

def _num(col: pd.Series) -> pd.Series:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª ¬´1234,56¬ª ‚Üí 1234.56 (float)."""
    return pd.to_numeric(
        col.astype(str)
           .str.replace("\u00A0", "", regex=False)  # –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª
           .str.replace(" ",     "", regex=False)
           .str.replace(",",     ".", regex=False),
        errors="coerce",
    )


def _interp_bf_ff(s: pd.Series) -> pd.Series:
    """–ò–Ω—Ç–µ—Ä–ø. –ø—Ä–æ–ø—É—Å–∫–æ–≤ ‚â§ *GAP_LIMIT* –¥–Ω–µ–π, –∑–∞—Ç–µ–º backfill+forwardfill."""
    return s.interpolate(limit=GAP_LIMIT, limit_direction="both").bfill().ffill()


def _bf_ff(s: pd.Series) -> pd.Series:
    """–ü—Ä–æ—Å—Ç–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: `bfill` ‚Üí `ffill`."""
    return s.bfill().ffill()

# ---------------------------------------------------------------------
# ‚¨áÔ∏è  –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ü–ü–î
# ---------------------------------------------------------------------

def clean_ppd(df: pd.DataFrame) -> pd.DataFrame:
    """–û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—ã—Ä—ã—Ö —Ä—è–¥–æ–≤ –ø—Ä–∏—ë–º–∞ –∂–∏–¥–∫–æ—Å—Ç–∏ (–ü–ü–î).

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    ----------
    df : pd.DataFrame
        –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ (¬´–¥–∞—Ç–∞¬ª, ¬´q_ppd¬ª, ¬´p_cust¬ª, ¬´d_choke¬ª, ‚Ä¶).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    ----------
    pd.DataFrame
        –û—á–∏—â–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º, –≥–¥–µ –ø—Ä–æ–ø—É—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã, –∞
        —Ç–∏–ø—ã –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫ *int*.
    """
    wells: list[pd.DataFrame] = []

    # 1) –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –∫ float
    for col in ("q_ppd", "p_cust", "d_choke"):
        df[col] = _num(df.get(col, pd.NA))

    # 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –∫–∞–∂–¥–æ–π —Å–∫–≤–∞–∂–∏–Ω–µ –æ—Ç–¥–µ–ª—å–Ω–æ ‚Äî–ª–æ–≥–∏–∫–∞ –ø—Ä–µ–∂–Ω—è—è
    for _, sub in df.groupby("well", sort=False):
        sub = sub.reset_index(drop=True)

        # 2.1 –î–∏–∞–º–µ—Ç—Ä —à—Ç—É—Ü–µ—Ä–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–∞
        sub["d_choke"] = sub["d_choke"].ffill().bfill().fillna(0)
        sub["q_ppd"]   = sub["q_ppd"].where(sub["q_ppd"] >= MIN_WORK_PPD, np.nan)

        # 2.2 –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ ¬´—Å–∫–≤–∞–∂–∏–Ω–∞ –≤ —Ä–∞–±–æ—Ç–µ¬ª
        work_flag: list[bool] = []
        in_work, no_pq, no_both = False, 0, 0
        for _, row in sub.iterrows():
            has_p = row["p_cust"] > 0
            has_q = row["q_ppd"] >= MIN_WORK_PPD

            # –∑–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ —Ä–µ–∂–∏–º–∞
            if not in_work and has_p:
                in_work = True
            # –≤–Ω—É—Ç—Ä–∏ —Ä–∞–±–æ—á–µ–≥–æ —Ä–µ–∂–∏–º–∞ ‚Äî–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –¥–∞–≤–ª–µ–Ω–∏—è/—Ä–∞—Å—Ö–æ–¥–∞
            if in_work:
                if not has_p and has_q:
                    no_pq += 1
                    if no_pq >= NO_PRESS_WITH_Q_LIMIT:
                        # –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–ª–∞–≥–∏
                        start = len(work_flag) - (no_pq - 1)
                        for k in range(start, len(work_flag)):
                            work_flag[k] = False
                        in_work = False; no_pq = no_both = 0
                elif not has_p and not has_q:
                    no_both += 1
                    if no_both >= 5:
                        start = len(work_flag) - (no_both - 1)
                        for k in range(start, len(work_flag)):
                            work_flag[k] = False
                        in_work = False; no_pq = no_both = 0
                else:
                    no_pq = no_both = 0
            work_flag.append(in_work)

        sub["work"] = work_flag

        # 2.3 –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Ä–∞–±–æ—á–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        last_p, p_out = 0.0, []
        for i, row in sub.iterrows():
            if sub.at[i, "work"]:
                if row["p_cust"] > 0:
                    last_p = row["p_cust"]
                p_out.append(last_p)
            else:
                last_p = 0.0; p_out.append(0.0)
        sub["p_cust"] = pd.Series(p_out, index=sub.index)

        # 2.4 –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ —Ä–∞–±–æ—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        out_q = pd.Series(0.0, index=sub.index)
        grp = sub["work"].ne(sub["work"].shift()).cumsum()
        for _, idx in sub.groupby(grp, sort=False).groups.items():
            if sub.loc[idx, "work"].iat[0]:
                seg = sub.loc[idx, "q_ppd"].bfill().ffill().fillna(0)
                out_q.loc[idx] = seg
        sub["q_ppd"] = out_q

        # 2.5 –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        sub["d_choke"] = sub["d_choke"].astype(int)
        sub["p_cust"]  = sub["p_cust"].round(0).astype(int)
        sub["q_ppd"]   = sub["q_ppd"].round(0).astype(int)
        wells.append(sub.drop(columns="work"))

    return pd.concat(wells, ignore_index=True)

# ---------------------------------------------------------------------
# ‚¨á  –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–±—ã—á–∏ –Ω–µ—Ñ—Ç–∏
# ---------------------------------------------------------------------

def clean_oil(df: pd.DataFrame) -> pd.DataFrame:
    """–û—á–∏—Å—Ç–∫–∞ —Å—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–±—ã—á–∏ –Ω–µ—Ñ—Ç–∏.

    –ê–ª–≥–æ—Ä–∏—Ç–º –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É: —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–±–æ—á–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ
    —á–∞—Å—Ç–æ—Ç–µ/–æ–±—ä—ë–º—É, –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏, –æ–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è.
    """
    out: list[pd.DataFrame] = []

    # 1) –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ —á–∏—Å–µ–ª
    for col in ("q_oil", "water_cut", "p_oil", "freq", "t_work"):
        df[col] = _num(df.get(col, pd.NA))

    # 2) –ü–æ –∫–∞–∂–¥–æ–π —Å–∫–≤–∞–∂–∏–Ω–µ
    for _, group in df.groupby("well", sort=False):
        sub = group.reset_index(drop=True)

        # 2.1 –§–ª–∞–≥ ¬´–ø–æ–∫–∞–∑–∞–Ω–∏—è –µ—Å—Ç—å¬ª
        raw_flag = (sub["freq"] > FREQ_THRESH) | ((sub["q_oil"] > 0) & (sub["t_work"] > 0))
        work: list[bool] = []
        miss, in_work = 0, False
        for is_raw in raw_flag:
            if not in_work and is_raw:
                in_work = True; miss = 0
            elif in_work and not is_raw:
                miss += 1
                if miss >= 5:
                    # –æ—Ç–∫–∞—Ç —Ñ–ª–∞–≥–∞
                    start = len(work) - miss + 1
                    for i in range(start, len(work)):
                        work[i] = False
                    in_work = False; miss = 0; continue
            else:
                miss = 0
            work.append(in_work)
        work.extend([False] * (len(sub) - len(work)))
        sub["work"] = work

        # 2.2 –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º –∫–æ–ª–æ–Ω–æ–∫
        for col in ("water_cut", "freq", "t_work"):
            filled = sub[col].where(sub["work"]).pipe(_bf_ff)
            sub[col] = filled.where(sub["work"], 0)
        for col in ("q_oil", "p_oil"):
            filled = sub[col].where(sub["work"]).pipe(_interp_bf_ff)
            sub[col] = filled.where(sub["work"], 0)

        # 2.3 –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∏ —Ñ–∏–Ω–∞–ª
        sub["water_cut"] = sub["water_cut"].round(0).astype(int)
        sub["freq"]       = sub["freq"].round(0).astype(int)
        sub["t_work"]     = sub["t_work"].round(1)
        sub["p_oil"]      = sub["p_oil"].round(1)
        out.append(sub.drop(columns="work"))

    return pd.concat(out, ignore_index=True)

# ---------------------------------------------------------------------
# ‚¨á  –°—É—Ç–æ—á–Ω—ã–π —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ---------------------------------------------------------------------

def resample_and_fill(series: pd.Series, *, kind: str) -> pd.Series:
    """–°—É—Ç–æ—á–Ω—ã–π —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥ + –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ (–ª–æ–≥–∏–∫–∞ –ø—Ä–µ–∂–Ω—è—è)."""
    daily = series.resample("D").asfreq()
    name  = series.name
    if name in ("water_cut", "freq", "t_work"):
        return _bf_ff(daily)
    if name == "d_choke":
        return daily.ffill().bfill()
    if daily.isna().all():
        return pd.Series(0, index=daily.index, name=name)
    return _interp_bf_ff(daily)

# ---------------------------------------------------------------------
# ‚¨á  –ß—Ç–µ–Ω–∏–µ ¬´—Å—ã—Ä–æ–≥–æ¬ª Excel/CSV ‚Äî–æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ
#     –≤–æ –≤–Ω–µ—à–Ω–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö DataFrame‚Äë–æ–≤.
# ---------------------------------------------------------------------

def _find_header(path: Path, probe: int = 20) -> int:
    """–ò—â–µ—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é —Å–ª–æ–≤–∞ ¬´–¥–∞—Ç–∞¬ª."""
    sample = pd.read_excel(path, header=None, nrows=probe, dtype=str)
    for i in range(probe):
        if sample.iloc[i].astype(str).str.contains("–¥–∞—Ç–∞", case=False, na=False).any():
            return i
    return 0


def _read_raw(path: Path, sheet_name: str) -> pd.DataFrame:
    """–ß—Ç–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ Excel —Å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–æ–º —à–∞–ø–∫–∏ + –æ—á–∏—Å—Ç–∫–∞ –∏–º—ë–Ω –∫–æ–ª–æ–Ω–æ–∫."""
    header = _find_header(path)
    df = pd.read_excel(path, sheet_name=sheet_name, header=header, dtype=str)
    df = df.loc[:, ~df.columns.str.startswith("Unnamed")]
    df.columns = df.columns.str.replace("\u00A0", " ").str.strip()
    for col in df.columns:
        if re.search(r"(?i)–¥–∞—Ç–∞", col):
            df = df.rename(columns={col: "date"}); break
    df["date"] = pd.to_datetime(df["date"], dayfirst=False, errors="coerce")
    return df


def _ru(s: str) -> str:
    """–£—Ç–∏–ª–∏—Ç–∞: —Ä—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞ ‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ (lower, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)."""
    return s.lower().replace("\u00a0", " ").replace(" ", "")

# –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫
RU2ENG_OIL = {
    "‚Ññ–ø/–ø": "idx", "–º–µ—Å—Ç.": "field", "‚Ññ—Å–∫–≤–∞–∂–∏–Ω—ã": "well", "–∫—É—Å—Ç": "cluster",
    "–¥–∞—Ç–∞": "date", "q–∂": "q_oil", "–æ–±–≤": "water_cut",
    "—Ä–ø—Ä–∏–µ–º": "p_oil", "f–≤—Ä–∞—â—Ç–º": "freq", "—Ç—Ä–∞–±(—Ç–º)": "t_work",
    "trab(—Ç–º)": "t_work",
}
RU2ENG_PPD = {
    "‚Ññ–ø/–ø": "idx", "–º–µ—Å—Ç.": "field", "‚Ññ—Å–∫–≤–∞–∂–∏–Ω—ã": "well", "–∫—É—Å—Ç": "cluster",
    "–¥–∞—Ç–∞": "date", "d—à—Ç": "d_choke",
    "p–∫—É—Å—Ç": "p_cust", "—Ä–∫—É—Å—Ç": "p_cust", "—Ä–∫—É—Å—Ç–æ–≤–æ–µ": "p_cust",
    "q–ø—Ä–∏–µ–º.—Ç–µ—Ö": "q_ppd",
}


def load_ppd(path: Path | str = PPD_FILE) -> pd.DataFrame:
    """–ß–∏—Ç–∞–µ—Ç Excel –ü–ü–î –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –ø–æ–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç."""
    df = _read_raw(Path(path), PPD_SHEET_NAME)
    df = df.rename({c: RU2ENG_PPD[_ru(c)] for c in df.columns if _ru(c) in RU2ENG_PPD}, axis=1)
    return df


def load_oil(path: Path | str = OIL_FILE) -> pd.DataFrame:
    """–ß–∏—Ç–∞–µ—Ç Excel –¥–æ–±—ã—á–∏ –Ω–µ—Ñ—Ç–∏ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∫–æ–ª–æ–Ω–∫–∏."""
    df = _read_raw(Path(path), OIL_SHEET_NAME)
    df = df.rename({c: RU2ENG_OIL[_ru(c)] for c in df.columns if _ru(c) in RU2ENG_OIL}, axis=1)
    for col in df.columns:
        if re.search(r"(?i)\(—Ç–º\)|—Ä–∞–±", col):
            df = df.rename(columns={col: "t_work"}); break
    return df


def load_coords(path: Path | str = COORD_FILE) -> pd.DataFrame:
    """–ß–∏—Ç–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (X, Y)."""
    return (
        pd.read_excel(path)
          .rename(columns={"–°–∫–≤–∞–∂–∏–Ω–∞": "well", "X": "x", "Y": "y"})
          [["well", "x", "y"]]
    )

# ---------------------------------------------------------------------
# ‚¨áÔ∏è  –í—Å–ø–æ–º. —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–∫–∏
# ---------------------------------------------------------------------

def _daily(df: pd.DataFrame, col: str, *, kind: str) -> pd.DataFrame:
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ —Å–∫–≤–∞–∂–∏–Ω–µ –∏ —Ä–µ—Å–µ–º–ø–ª–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –Ω–∞ —Å—É—Ç–∫–∏."""
    return (
        df.set_index("date")
          .groupby("well", sort=False)[col]
          .apply(lambda s: resample_and_fill(s, kind=kind))
          .reset_index()
    )

# =====================================================================
#                         –ß –ò –° –¢ –û –ï   –Ø –î –† –û
# =====================================================================

def _build_clean_data_df(
    ppd_raw: pd.DataFrame,
    oil_raw: pd.DataFrame,
    coords: pd.DataFrame,
) -> tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—ã–π —á–∏—Å—Ç—ã–π –¥–∞—Ç–∞—Å–µ—Ç *–±–µ–∑* —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    ----------
    ppd_raw : pd.DataFrame
        –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ü–ü–î –ø–æ—Å–ª–µ `load_ppd` (—Ä—É—Å—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã).
    oil_raw : pd.DataFrame
        –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±—ã—á–∏ –Ω–µ—Ñ—Ç–∏ –ø–æ—Å–ª–µ `load_oil`.
    coords : pd.DataFrame
        –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–≤–∞–∂–∏–Ω (`well`, `x`, `y`).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    ----------
    tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]
        `ppd_daily`, `oil_daily`, `coords` ‚Äî–≥–æ—Ç–æ–≤—ã–µ —Å—É—Ç–æ—á–Ω—ã–µ —Ä—è–¥—ã.
    """

    # 1) –û—á–∏—Å—Ç–∫–∞ (–±–µ–∑ I/O)
    ppd_cln = clean_ppd(ppd_raw)
    oil_cln = clean_oil(oil_raw)

    # 2) –°—É—Ç–æ—á–Ω—ã–µ —Ä—è–¥—ã –ü–ü–î
    ppd_q  = _daily(ppd_cln, "q_ppd",  kind="ppd")
    ppd_p  = _daily(ppd_cln, "p_cust", kind="ppd")
    ppd_d  = _daily(ppd_cln, "d_choke", kind="ppd")
    ppd_daily = ppd_q.merge(ppd_p, on=("well", "date")).merge(ppd_d, on=("well", "date"))

    # 3) –°—É—Ç–æ—á–Ω—ã–µ —Ä—è–¥—ã –Ω–µ—Ñ—Ç–∏
    oil_q  = _daily(oil_cln, "q_oil",     kind="oil")
    oil_p  = _daily(oil_cln, "p_oil",     kind="oil")
    oil_wc = _daily(oil_cln, "water_cut", kind="oil")
    oil_f  = _daily(oil_cln, "freq",      kind="oil")
    oil_tw = _daily(oil_cln, "t_work",    kind="oil")
    oil_daily = (
        oil_q.merge(oil_p, on=("well", "date"))
              .merge(oil_wc, on=("well", "date"))
              .merge(oil_f,  on=("well", "date"))
              .merge(oil_tw, on=("well", "date"))
    )

    # 4) –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤/–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    ppd_daily[["q_ppd", "p_cust", "d_choke"]] = ppd_daily[["q_ppd", "p_cust", "d_choke"]].astype(int)
    oil_daily["q_oil"]     = oil_daily["q_oil"].astype(int)
    oil_daily["water_cut"] = oil_daily["water_cut"].astype(int)
    oil_daily["freq"]      = oil_daily["freq"].astype(int)
    oil_daily["t_work"]    = oil_daily["t_work"].round(1)

    return ppd_daily, oil_daily, coords

# =====================================================================
#                    –£ –ù –ò –í –ï –† –° –ê –õ –¨ –ù –´ –ô   –ò –ù –¢ –ï –† –§ –ï –ô –°
# =====================================================================

def build_clean_data(
    *,
    ppd_df: pd.DataFrame | None = None,
    oil_df: pd.DataFrame | None = None,
    coords_df: pd.DataFrame | None = None,
    ppd_path: str | Path | None = None,
    oil_path: str | Path | None = None,
    coords_path: str | Path | None = None,
    save_csv: bool = True,
) -> tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:
    """–ü–æ–ª–Ω—ã–π –∫–æ–Ω–≤–µ–π–µ—Ä –ø—Ä–µ–¥‚Äë–æ–±—Ä–∞–±–æ—Ç–∫–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    ----------
    ppd_df, oil_df, coords_df : pd.DataFrame | None
        –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ DataFrame‚Äë—ã. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã, **—Ñ–∞–π–ª—ã –Ω–µ —á–∏—Ç–∞–µ–º**.
    ppd_path, oil_path, coords_path : str | Path | None
        –ü—É—Ç–∏ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º Excel/CSV. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, –∫–æ–≥–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π
        `*_df` –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä—É—Ç—Å—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞.
    save_csv : bool, default **True**
        –ï—Å–ª–∏ *True* ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç `ppd_clean.csv`, `oil_clean.csv`, `coords_clean.csv`
        –≤ `clean_data/` (–ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    ----------
    tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]
        –ì–æ—Ç–æ–≤—ã–µ —Å—É—Ç–æ—á–Ω—ã–µ —Ä—è–¥—ã: `ppd_daily`, `oil_daily` –∏ `coords_df`.
    """

    # 1) –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ñ–∞–π–ª—ã –ª–∏–±–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ DF)
    if ppd_df is None:
        ppd_df = load_ppd(ppd_path or PPD_FILE)
    if oil_df is None:
        oil_df = load_oil(oil_path or OIL_FILE)
    if coords_df is None:
        coords_df = load_coords(coords_path or COORD_FILE)

    # 2) –ß–∏—Å—Ç–æ–µ —è–¥—Ä–æ ‚Äî –Ω–∏–∫–∞–∫–∏—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤–Ω—É—Ç—Ä–∏
    ppd_daily, oil_daily, coords_df = _build_clean_data_df(ppd_df, oil_df, coords_df)

    # 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    if save_csv:
        # –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ø–æ–ª–µ, –∫—É—Å—Ç) –±–µ—Ä—ë–º –∏–∑ *–æ—á–∏—â–µ–Ω–Ω—ã—Ö* –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
        meta_ppd = clean_ppd(ppd_df).drop_duplicates("well")[["field", "well", "cluster"]]
        meta_oil = clean_oil(oil_df).drop_duplicates("well")[["field", "well", "cluster"]]

        # ----- –ü–ü–î -----------------------------------------------------
        out_ppd = (
            ppd_daily.merge(meta_ppd, on="well", how="left")
                     [["field", "well", "cluster", "date", "d_choke", "p_cust", "q_ppd"]]
        )
        out_ppd.insert(0, "‚Ññ –ø/–ø", range(1, len(out_ppd) + 1))
        out_ppd = out_ppd.rename(columns={"cluster": "–ö—É—Å—Ç"})
        out_ppd["date"] = pd.to_datetime(out_ppd["date"]).dt.strftime("%d.%m.%Y")
        out_ppd.to_csv(CLEAN_DIR / "ppd_clean.csv", index=False, encoding="utf-8-sig")

        # ----- –ù–µ—Ñ—Ç—å ---------------------------------------------------
        out_oil = (
            oil_daily.merge(meta_oil, on="well", how="left")
                     [["field", "well", "cluster", "date", "q_oil", "water_cut", "p_oil", "freq", "t_work"]]
        )
        out_oil.insert(0, "‚Ññ –ø/–ø", range(1, len(out_oil) + 1))
        out_oil = out_oil.rename(columns={
            "cluster": "–ö—É—Å—Ç",
            "water_cut": "watercut",
            "t_work": "T—Ä–∞–±(–¢–ú)",
        })
        out_oil["date"] = pd.to_datetime(out_oil["date"]).dt.strftime("%d.%m.%Y")
        out_oil.to_csv(CLEAN_DIR / "oil_clean.csv", index=False, encoding="utf-8-sig")

        # ----- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ---------------------------------------------
        coords_df.to_csv(CLEAN_DIR / "coords_clean.csv", index=False, encoding="utf-8-sig")
        print(f"‚úì CSV‚Äë—Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚Üí {CLEAN_DIR.resolve()}")

    return ppd_daily, oil_daily, coords_df

# ---------------------------------------------------------------------
# ‚¨á  CLI‚Äë—Ä–µ–∂–∏–º (–∑–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è –Ω–∞–ø—Ä—è–º—É—é) ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ–Ω –ø—Ä–µ–∂–Ω–µ–º—É.
# ---------------------------------------------------------------------
if __name__ == "__main__":
    # –ü—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ —á–∏—Ç–∞–µ–º Excel –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ CSV
    build_clean_data(save_csv=True)
